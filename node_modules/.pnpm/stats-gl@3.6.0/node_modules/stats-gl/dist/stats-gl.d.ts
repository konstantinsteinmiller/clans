declare class Panel {
    canvas: HTMLCanvasElement;
    context: CanvasRenderingContext2D | null;
    name: string;
    fg: string;
    bg: string;
    gradient: CanvasGradient | null;
    id: number;
    PR: number;
    WIDTH: number;
    HEIGHT: number;
    TEXT_X: number;
    TEXT_Y: number;
    GRAPH_X: number;
    GRAPH_Y: number;
    GRAPH_WIDTH: number;
    GRAPH_HEIGHT: number;
    constructor(name: string, fg: string, bg: string);
    private createGradient;
    initializeCanvas(): void;
    update(value: number, maxValue: number, decimals?: number): void;
    updateGraph(valueGraph: number, maxGraph: number): void;
}

interface StatsOptions {
    trackGPU?: boolean;
    trackCPT?: boolean;
    trackHz?: boolean;
    logsPerSecond?: number;
    graphsPerSecond?: number;
    samplesLog?: number;
    samplesGraph?: number;
    precision?: number;
    minimal?: boolean;
    horizontal?: boolean;
    mode?: number;
}
interface AverageData {
    logs: number[];
    graph: number[];
}
interface InfoData {
    render: {
        timestamp: number;
    };
    compute: {
        timestamp: number;
    };
}
declare class Stats {
    dom: HTMLDivElement;
    mode: number;
    horizontal: boolean;
    minimal: boolean;
    trackGPU: boolean;
    trackHz: boolean;
    trackCPT: boolean;
    samplesLog: number;
    samplesGraph: number;
    precision: number;
    logsPerSecond: number;
    graphsPerSecond: number;
    gl: WebGL2RenderingContext | null;
    ext: any | null;
    info?: InfoData;
    private activeQuery;
    private gpuQueries;
    private threeRendererPatched;
    private beginTime;
    private prevCpuTime;
    private frameTimes;
    private renderCount;
    private totalCpuDuration;
    private totalGpuDuration;
    private totalGpuDurationCompute;
    private _panelId;
    private fpsPanel;
    private msPanel;
    private gpuPanel;
    private gpuPanelCompute;
    private vsyncPanel;
    averageFps: AverageData;
    averageCpu: AverageData;
    averageGpu: AverageData;
    averageGpuCompute: AverageData;
    private updateCounter;
    private prevGraphTime;
    private lastMin;
    private lastMax;
    private lastValue;
    private prevTextTime;
    private readonly VSYNC_RATES;
    private detectedVSync;
    private frameTimeHistory;
    private readonly HISTORY_SIZE;
    private readonly VSYNC_THRESHOLD;
    private lastFrameTime;
    static Panel: typeof Panel;
    constructor({ trackGPU, trackCPT, trackHz, logsPerSecond, graphsPerSecond, samplesLog, samplesGraph, precision, minimal, horizontal, mode }?: StatsOptions);
    private initializeDOM;
    private setupEventListeners;
    private handleClick;
    private handleResize;
    init(canvasOrGL: WebGL2RenderingContext | HTMLCanvasElement | OffscreenCanvas | any): Promise<void>;
    private handleThreeRenderer;
    private handleWebGPURenderer;
    private initializeWebGPUPanels;
    private initializeWebGL;
    private initializeGPUTracking;
    begin(): void;
    end(): void;
    update(): void;
    private processWebGPUTimestamps;
    private resetCounters;
    resizePanel(panel: Panel): void;
    addPanel(panel: Panel): Panel;
    showPanel(id: number): void;
    processGpuQueries(): void;
    private detectVSync;
    endInternal(): number;
    private updatePanelComponents;
    private beginProfiling;
    private endProfiling;
    updatePanel(panel: {
        update: any;
        updateGraph: any;
        name: string;
    } | null, averageArray: {
        logs: number[];
        graph: number[];
    }, precision?: number): void;
    private updateAverages;
    addToAverage(value: number, averageArray: {
        logs: any;
        graph: any;
    }): void;
    get domElement(): HTMLDivElement;
    patchThreeWebGPU(renderer: any): void;
    patchThreeRenderer(renderer: any): void;
}

export { Stats as default };
